//
//  Insult Generator.swift
//  Shakespeare Insult Kit
//
//  Created by Apple User on 11/16/23.
//

import Foundation

/// Uses longest words to help check text spacing
fileprivate let showLongest: Bool = false


class InsultGenerator {
    static private let preface = ""
    
    static private let PartOne = [
        "artless",
        "bawdy",
        "beslubbering",
        "bootless",
        "churlish",
        "cockered",
        "cloouted",
        "craven",
        "currish",
        "dankish",
        "dissembling",
        "droning",
        "errant",
        "fawning",
        "fobbing",
        "froward",
        "frothy",
        "gleeking",
        "goatish",
        "gorbellied",
        "impertinent",
        "infectious",
        "jarring",
        "joggerheaded",
        "lumpish",
        "mammering",
        "mangled",
        "mewling",
        "paunchy",
        "pribbling",
        "puking",
        "puny",
        "qualling",
        "rank",
        "reeky",
        "roguish",
        "ruttish",
        "saucy",
        "spleÃ©ny",
        "spongy",
        "surly",
        "tottering",
        "unmuzzled",
        "vain",
        "venomed",
        "villainous",
        "warped",
        "wayward",
        "weedy",
        "yeasty",
        "cullionly",
        "fusty",
        "caluminous",
        "wimpled ",
        "burly-boned",
        "misbegotten",
        "odiferous",
        "poisonous",
        "fishified",
        "wart-necked",
    ]
    
    static private let PartTwo = [
        "base-court",
        "bat-forling",
        "beef-witted",
        "beetle-headed",
        "boil-brained",
        "clapper-clawed",
        "clay-brained",
        "common-kissing",
        "crook-pated",
        "dismal-dreaming",
        "dizzy-eyed",
        "doghearted",
        "dread-bolted",
        "earth-vexing",
        "elf-skinned",
        "fat-kidneyed",
        "fen-sucked",
        "flap-mothed",
        "fly-bitten",
        "folly-fallen",
        "fool-born",
        "fil-gorged",
        "guts-griping",
        "half-faced",
        "hasty-witted",
        "hedge-born",
        "hell-hated",
        "idle-headed",
        "ill-breeding",
        "ill-nurtured",
        "knotty-pated",
        "milk-livered",
        "motley-minded",
        "onion-eyed",
        "plume-plucked",
        "pottle-deep",
        "pox-marked",
        "reeling-ripe",
        "rough-hewn",
        "rude-growing",
        "rump-fed",
        "shard-borne",
        "sheep-biting",
        "spur-galled",
        "swag-bellied",
        "tardy-gaited",
        "tickle-brained",
        "toad-spotted",
        "unchin-snoted",
        "weather-bitten",
        "whoreson",
        "malmsey-nosed",
        "rampallian",
        "lily-livered",
        "scurvy-valiant",
        "brazen-faced",
        "unwash'd",
        "bunch-back'd",
        "leaden-footed",
        "muddy-mettled",
        "pigeon-liver'd",
        "scale-sided",
    ]
    
    static private let PartThree = [
        "apple-john",
        "baggage",
        "barnacle",
        "bladder",
        "boar-pig",
        "bugbear",
        "bum-bailey",
        "canket-blossom",
        "clack-dish",
        "clotpole",
        "coxcomb",
        "codpieve",
        "death-token",
        "dewberry",
        "flap-dragon",
        "flax-wench",
        "flirt-gill",
        "foot-licker",
        "futilarrian",
        "giglet",
        "gudgeon",
        "haggard",
        "harpy",
        "hedge-pig",
        "horn-beast",
        "hugger-mugger",
        "joithead",
        "lewduster",
        "lout",
        "maggot-pie",
        "malt-worm",
        "mammet",
        "measle",
        "minnow",
        "miscreant",
        "moldwarp",
        "mumble-news",
        "nut-hook",
        "pigeon-egg",
        "pignut",
        "puttock",
        "pumpion",
        "ratsbane",
        "scut",
        "skainsmate",
        "strumpot",
        "varlot",
        "vassal",
        "wheyface",
        "wagtail",
        "knave",
        "blind-worm",
        "popinjay",
        "scullian",
        "jolt-head",
        "malcontent",
        "devil-monk",
        "toad",
        "rascal",
        "basket-cockle",
    ]
    
    
    static var firstPart: String { showLongest ? longestFirst : "\(preface) \(PartOne.randomElement() ?? "")," }
    static var secondPart: String { showLongest ? longestSecond : "\(PartTwo.randomElement() ?? "")," }
    static var thirdPart: String { showLongest ? longestThird : "\(PartThree.randomElement() ?? "")!" }
    
    
    static func playCitation() -> String {
        let act = Int.random(in: 1...7)
        let scene = Int.random(in: 1...72)
        
        let line = Int.random(in: 20...4200)
        let secondLine = line + Int.random(in: 2...10)
        
        var linesString = ""
        
        if line < 100 {
            linesString = "\(line)-\(secondLine)"
        }
        else { 
            let lineMag = lineMagnitude(for: line)
            let secLineMag = lineMagnitude(for: secondLine)
            
            let lineOffset = (lineMag == secLineMag) ? (lineMag * 100) : 0
            linesString = "\(line)-\(secondLine - lineOffset)"
        }
        
        return "'\(Plays.randomPlay())' (\(act).\(scene).\(linesString))"
    }
    
    /// Tens, Hundreds, or Thousands:  Used to figure out how to print line numbers
    static func lineMagnitude(for line: Int) -> Int { line / 100 }
    
    // Return the longest strings for UI testing
    static var longestFirst: String { "\(preface) \(PartOne.reduce("") { $0.count > $1.count ? $0 : $1 })," }
    static var longestSecond: String { "\(PartTwo.reduce("") { $0.count > $1.count ? $0 : $1 })," }
    static var longestThird: String { "\(PartThree.reduce("") { $0.count > $1.count ? $0 : $1 })!" }
}
    

class Plays {
    static let plays = [
        "All's Well That Ends Well",
        "Antony and Cleopatra",
        "As You Like It",
        "The Comedy of Errors",
        "Coriolanus",
        "Cymbeline",
        "Hamlet",
        "Henry IV, Part 1",
        "Henry IV, Part 2",
        "Henry V",
        "Henry VI, Part 1",
        "Henry VI, Part 2",
        "Henry VI, Part 3",
        "Henry VIII",
        "Julius Caesar",
        "King John",
        "King Lear",
        "Love's Labour's Lost",
        "Macbeth",
        "Measure for Measure",
        "The Merchant of Venice",
        "The Merry Wives of Windsor",
        "A Midsummer Night's Dream",
        "Much Ado About Nothing",
        "Othello",
        "Pericles, Prince of Tyre",
        "Richard II",
        "Richard III",
        "Romeo and Juliet",
        "The Taming of the Shrew",
        "The Tempest",
        "Timon of Athens",
        "Titus Andronicus",
        "Troilus and Cressida",
        "Twelfth Night",
        "The Two Gentlemen of Verona",
        "The Two Noble Kinsmen",
        "The Winter's Tale"
    ]
    
    
    static func randomPlay() -> String {
        showLongest ? longestPlay : plays.randomElement() ?? "Othello"
    }
    
    static var longestPlay: String {
        plays.reduce("") { $0.count > $1.count ? $0 : $1 }
    }

}


class Characters {
    static func randomCharacter() -> String {
        showLongest ? longestCharacter : characters.randomElement() ?? "William"
    }
    
    static var longestCharacter: String {
        characters.reduce("") { $0.count > $1.count ? $0 : $1 }
    }

    
    static let characters = [
        // Histories
        "Falstaff",
        "Henry IV",
        "Hotspur (Henry Percy)",
        "Prince Hal (Henry, Prince of Wales)",
        "Prince John of Lancaster",
        "Charles VI of France",
        "Fluellen",
        "Henry V",
        "Pistol",
        "Charles, Dauphin of France",
        "Henry VI",
        "Joan of Arc",
        "Richard, Duke of York",
        "Henry VI",
        "Jack Cade",
        "Margaret of Anjou",
        "Richard, Duke of York",
        "Edward, Earl of March (later Edward IV)",
        "Henry VI",
        "Margaret of Anjou",
        "Richard, Duke of York",
        "Richard, Duke of Gloucester (later Richard III)",
        "Anne Boleyn",
        "Cardinal Wolsey",
        "Catherine of Aragon",
        "Henry VIII",
        "Arthur, Duke of Brittany",
        "Constance",
        "King John",
        "Philip the Bastard",
        "Bolingbroke (Henry IV)",
        "Richard II",
        "The Duke of York",
        "Anne Neville",
        "Edward IV",
        "Elizabeth Woodville",
        "Richard III",
        "The Duke of Buckingham",
        
        // Tragedies
       "Antony",
       "Cleopatra",
       "Enobarbus",
       "Octavius Caesar",
       "Aufidius",
       "Cominius",
       "Coriolanus",
       "Menenius",
       "Volumnia",
       "Claudius",
       "Gertrude",
       "Hamlet",
       "Horatio",
       "Laertes",
       "Ophelia",
       "Polonius",
       "Brutus",
       "Cassius",
       "Julius Caesar",
       "Mark Antony",
       "Octavius Caesar",
       "Portia",
       "Cordelia",
       "Edgar",
       "Edmund",
       "Goneril",
       "Kent",
       "King Lear",
       "Regan",
       "Banquo",
       "Duncan",
       "Lady Macbeth",
       "Macbeth",
       "Macduff",
       "Malcolm",
       "Cassio",
       "Desdemona",
       "Emilia",
       "Iago",
       "Othello",
       "Roderigo",
       "Benvolio",
       "Friar Laurence",
       "Juliet",
       "Mercutio",
       "Paris",
       "Romeo",
       "Tybalt",
       "Apemantus",
       "Flavius",
       "Timon",
       "Aaron",
       "Lavinia",
       "Lucius",
       "Marcus Andronicus",
       "Saturninus",
       "Tamora",
       "Titus Andronicus",
    
    // Comedies
        "Bertram",
        "Diana",
        "Helena",
        "King of France",
        "Lafeu",
        "Parolles",
        "Adam",
        "Celia",
        "Charles",
        "Duke Frederick",
        "Duke Senior",
        "Jaques",
        "Oliver",
        "Orlando",
        "Phebe",
        "Rosalind",
        "Silvius",
        "Touchstone",
        "Adriana",
        "Antipholus of Ephesus",
        "Antipholus of Syracuse",
        "Dromio of Ephesus",
        "Dromio of Syracuse",
        "Luciana",
        "Berowne",
        "Boyet",
        "Costard",
        "Don Adriano de Armado",
        "Dumaine",
        "Holofernes",
        "Jaquenetta",
        "King of Navarre",
        "Longaville",
        "Moth",
        "Princess of France",
        "Rosaline",
        "Angelo",
        "Claudio",
        "Duke Vincentio",
        "Escalus",
        "Isabella",
        "Lucio",
        "Mariana",
        "Antonio",
        "Bassanio",
        "Gratiano",
        "Jessica",
        "Launcelot Gobbo",
        "Lorenzo",
        "Nerissa",
        "Portia",
        "Shylock",
        "Falstaff",
        "Fenton",
        "Ford",
        "Mistress Ford",
        "Mistress Page",
        "Page",
        "Slender",
        "Bottom",
        "Demetrius",
        "Egeus",
        "Helena",
        "Hermia",
        "Hippolyta",
        "Lysander",
        "Oberon",
        "Puck",
        "Theseus",
        "Titania",
        "Beatrice",
        "Benedick",
        "Claudio",
        "Dogberry",
        "Don John",
        "Don Pedro",
        "Hero",
        "Leonato",
        "Dionyza",
        "Gower",
        "Helicanus",
        "Marina",
        "Pericles",
        "Simonides",
        "Thaisa",
        "Baptista Minola",
        "Bianca",
        "Grumio",
        "Hortensio",
        "Katherina",
        "Lucentio",
        "Petruchio",
        "Tranio",
        "Alonso",
        "Antonio",
        "Ariel",
        "Caliban",
        "Ferdinand",
        "Gonzalo",
        "Miranda",
        "Prospero",
        "Sebastian",
        "Stephano",
        "Antonio",
        "Duke Orsino",
        "Feste",
        "Malvolio",
        "Maria",
        "Olivia",
        "Sebastian",
        "Sir Andrew Aguecheek",
        "Sir Toby Belch",
        "Viola",
        "Julia",
        "Launce",
        "Lucetta",
        "Proteus",
        "Silvia",
        "Sir Thurio",
        "Speed",
        "Valentine",
        "Autolycus",
        "Camillo",
        "Hermione",
        "Leontes",
        "Paulina",
        "Perdita",
        "Polixenes"
    ]
    
}


